namespace BundleTransformer.Closure.Minifiers
{
	using System;
	using System.Collections.Generic;

	using Core.Assets;
	using Core.Minifiers;
	using CoreStrings = Core.Resources.Strings;

	/// <summary>
	/// Base class of minifier, which produces minifiction of JS-code 
	/// by using Google Closure Compiler
	/// </summary>
	public abstract class ClosureJsMinifierBase : IMinifier
	{
		/// <summary>
		/// Gets or sets a degree of compression and optimization to apply to your JavaScript.
		/// There are 3 possible compilation levels:
		/// WhitespaceOnly - just removes whitespace and comments from your JavaScript;
		/// Simple - performs compression and optimization that does not interfere with 
		/// the interaction between the compiled JavaScript and other JavaScript. 
		/// This level renames only local variables;
		/// Advanced - achieves the highest level of compression by renaming symbols in your 
		/// JavaScript. When using this type of compilation you must perform extra steps 
		/// to preserve references to external symbols.
		/// </summary>
		public CompilationLevel CompilationLevel
		{
			get;
			set;
		}

		/// <summary>
		/// Gets or sets a flag for whether to add line breaks and indentation to its 
		/// output code to make the code easier for humans to read
		/// </summary>
		public bool PrettyPrint
		{
			get;
			set;
		}

		/// <summary>
		/// Gets or sets a severity level of errors:
		///		0 - only syntax error messages;
		///		1 - only syntax error messages and warnings generated by the optimization;
		///		2 - in addition to syntax errors and warnings generated by optimization 
		///		passes, outputs warnings generated by selected code-checking passes;
		///		3 - in addition to syntax errors and warnings generated by optimization 
		///		passes, outputs warnings generated by all code-checking passes.
		/// </summary>
		public int Severity
		{
			get;
			set;
		}


		/// <summary>
		/// Produces code minifiction of assets
		/// </summary>
		/// <param name="assets">Set of assets</param>
		/// <returns>Set of assets with minified text content</returns>
		public abstract IList<IAsset> Minify(IList<IAsset> assets);

		/// <summary>
		/// Convert compilation level enum value to code
		/// </summary>
		/// <param name="compilationLevel">Compilation level enum value</param>
		/// <returns>Compilation level code</returns>
		internal static string ConvertCompilationLevelEnumValueToCode(CompilationLevel compilationLevel)
		{
			string code;

			switch(compilationLevel)
			{
				case CompilationLevel.WhitespaceOnly:
					code = "WHITESPACE_ONLY";
					break;
				case CompilationLevel.Simple:
					code = "SIMPLE_OPTIMIZATIONS";
					break;
				case CompilationLevel.Advanced:
					code = "ADVANCED_OPTIMIZATIONS";
					break;
				default:
					throw new InvalidCastException(string.Format(CoreStrings.Common_EnumValueToCodeConversionFailed,
						compilationLevel.ToString(), typeof(CompilationLevel)));
			}

			return code;
		}
	}
}