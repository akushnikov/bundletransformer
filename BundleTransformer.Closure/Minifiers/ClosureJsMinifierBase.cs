namespace BundleTransformer.Closure.Minifiers
{
	using System;
	using System.Collections.Generic;
	using System.IO;
	using System.Linq;

	using Core.Assets;
	using Core.FileSystem;
	using Core.Minifiers;
	using Core.Utilities;
	using CoreStrings = Core.Resources.Strings;

	using Configuration;

	/// <summary>
	/// Base class of minifier, which produces minifiction of JS-code
	/// by using Google Closure Compiler
	/// </summary>
	public abstract class ClosureJsMinifierBase : IMinifier
	{
		/// <summary>
		/// Virtual file system wrapper
		/// </summary>
		protected readonly IVirtualFileSystemWrapper _virtualFileSystemWrapper;

		/// <summary>
		/// Gets or sets a input and output charset.
		/// By default, accept UTF-8 as input and output US_ASCII.
		/// </summary>
		public string Charset
		{
			get;
			set;
		}

		/// <summary>
		/// Gets or sets a list of common JS-externs file paths
		/// </summary>
		public IList<string> CommonExternsFilePaths
		{
			get;
			set;
		}

		/// <summary>
		/// Gets or sets a degree of compression and optimization to apply to your JavaScript.
		/// There are 3 possible compilation levels:
		/// WhitespaceOnly - just removes whitespace and comments from your JavaScript;
		/// Simple - performs compression and optimization that does not interfere with
		/// the interaction between the compiled JavaScript and other JavaScript.
		/// This level renames only local variables;
		/// Advanced - achieves the highest level of compression by renaming symbols in your
		/// JavaScript. When using this type of compilation you must perform extra steps
		/// to preserve references to external symbols.
		/// </summary>
		public CompilationLevel CompilationLevel
		{
			get;
			set;
		}

		/// <summary>
		/// Gets or sets a list of JS-externs file mappings
		/// </summary>
		public IList<JsExternsFileMapping> ExternsFileMappings
		{
			get;
			set;
		}

		/// <summary>
		/// Gets or sets a flag for whether to add line breaks and indentation to its
		/// output code to make the code easier for humans to read
		/// </summary>
		public bool PrettyPrint
		{
			get;
			set;
		}

		/// <summary>
		/// Gets or sets a flag for whether to perform additional optimizations based on available information
		/// </summary>
		public bool UseTypesForOptimization
		{
			get;
			set;
		}

		/// <summary>
		/// Gets or sets a severity level of errors:
		///		0 - only syntax error messages;
		///		1 - only syntax error messages and warnings generated by the optimization;
		///		2 - in addition to syntax errors and warnings generated by optimization
		///		passes, outputs warnings generated by selected code-checking passes;
		///		3 - in addition to syntax errors and warnings generated by optimization
		///		passes, outputs warnings generated by all code-checking passes.
		/// </summary>
		public int Severity
		{
			get;
			set;
		}


		/// <summary>
		/// Constructs a instance of Closure JS-minifier
		/// </summary>
		/// <param name="virtualFileSystemWrapper">Virtual file system wrapper</param>
		/// <param name="closureConfig">Configuration settings of Closure Minifier</param>
		protected ClosureJsMinifierBase(IVirtualFileSystemWrapper virtualFileSystemWrapper,
			ClosureSettings closureConfig)
		{
			_virtualFileSystemWrapper = virtualFileSystemWrapper;

			CommonExternsFilePaths = closureConfig.Js.CommonExternsFiles
				.Cast<CommonJsExternsFileRegistration>()
				.Select(f => f.ExternsFilePath)
				.ToList()
				;
			ExternsFileMappings = closureConfig.Js.ExternMappings
				.Cast<JsExternsFileMappingRegistration>()
				.Select(m =>
					new JsExternsFileMapping(m.ScriptFilePath,
						Utils.ConvertToStringCollection(m.ExternsFilePaths, ',',
							trimItemValues: true, removeEmptyItems: true).ToList()
						)
				)
				.ToList()
				;
		}


		/// <summary>
		/// Produces a code minifiction of JS-asset
		/// </summary>
		/// <param name="asset">JS-asset</param>
		/// <returns>JS-asset with minified text content</returns>
		public abstract IAsset Minify(IAsset asset);

		/// <summary>
		/// Produces a code minifiction of JS-assets
		/// </summary>
		/// <param name="assets">Set of JS-assets</param>
		/// <returns>Set of JS-assets with minified text content</returns>
		public abstract IList<IAsset> Minify(IList<IAsset> assets);

		/// <summary>
		/// Gets a list of common JS-externs dependencies
		/// </summary>
		/// <returns>List of common JS-externs dependencies</returns>
		protected DependencyCollection GetCommonExternsDependencies()
		{
			IList<string> commonExternsFilePaths = CommonExternsFilePaths;

			if (CompilationLevel != CompilationLevel.Advanced || commonExternsFilePaths.Count == 0)
			{
				return new DependencyCollection();
			}

			IList<string> processedCommonExternsFilePaths = commonExternsFilePaths
				.Select(f => _virtualFileSystemWrapper.ToAbsolutePath(f))
				.Distinct(StringComparer.OrdinalIgnoreCase)
				.ToList()
				;

			DependencyCollection commonExternsDependencies = LoadExternsDependenciesFromVirtualFileSystem(
				processedCommonExternsFilePaths);

			return commonExternsDependencies;
		}

		/// <summary>
		/// Gets a list of asset JS-externs dependencies
		/// </summary>
		/// <param name="asset">Asset</param>
		/// <returns>List of asset JS-externs dependencies</returns>
		protected DependencyCollection GetAssetExternsDependencies(IAsset asset)
		{
			IList<JsExternsFileMapping> externsFileMappings = ExternsFileMappings;

			if (CompilationLevel != CompilationLevel.Advanced || externsFileMappings.Count == 0)
			{
				return new DependencyCollection();
			}

			IList<JsExternsFileMapping> processedExternsFileMappings = externsFileMappings
				.Select(m => new JsExternsFileMapping(
					Asset.RemoveAdditionalJsFileExtension(_virtualFileSystemWrapper.ToAbsolutePath(m.ScriptFilePath)),
					m.ExternsFilePaths
						.Select(f => _virtualFileSystemWrapper.ToAbsolutePath(f))
						.ToList()
				))
				.ToList()
				;
			var assetExternsFilePaths = new List<string>();

			if (asset.Combined)
			{
				IList<IAsset> originalAssets = asset.OriginalAssets;

				foreach (IAsset originalAsset in originalAssets)
				{
					FillAssetExternsFilePaths(originalAsset, processedExternsFileMappings, assetExternsFilePaths);
				}
			}
			else
			{
				FillAssetExternsFilePaths(asset, processedExternsFileMappings, assetExternsFilePaths);
			}

			assetExternsFilePaths = assetExternsFilePaths
				.Distinct(StringComparer.OrdinalIgnoreCase)
				.ToList()
				;

			DependencyCollection assetExternsDependencies = LoadExternsDependenciesFromVirtualFileSystem(
				assetExternsFilePaths);

			return assetExternsDependencies;
		}

		/// <summary>
		/// Fills a list of asset JS-externs file paths
		/// </summary>
		/// <param name="asset">Asset</param>
		/// <param name="externsFileMappings">List of JS-externs file mappings</param>
		/// <param name="assetExternsFilePaths">List of asset JS-externs file paths</param>
		private void FillAssetExternsFilePaths(IAsset asset, IList<JsExternsFileMapping> externsFileMappings,
			IList<string> assetExternsFilePaths)
		{
			string assetUrl = asset.Url;
			string processedAssetUrl = Asset.RemoveAdditionalJsFileExtension(assetUrl);

			JsExternsFileMapping currentExternsFileMapping = externsFileMappings.SingleOrDefault(m =>
				string.Equals(m.ScriptFilePath, processedAssetUrl, StringComparison.OrdinalIgnoreCase)
			);
			if (currentExternsFileMapping != null)
			{
				IList<string> externsFilePaths = currentExternsFileMapping.ExternsFilePaths;

				foreach (string externsFilePath in externsFilePaths)
				{
					assetExternsFilePaths.Add(externsFilePath);
				}
			}
		}

		/// <summary>
		/// Loads a JS-externs dependencies from virtual file system
		/// </summary>
		/// <param name="externsFilePaths">List of JS-externs file paths</param>
		/// <returns>List of JS-externs dependencies</returns>
		private DependencyCollection LoadExternsDependenciesFromVirtualFileSystem(IList<string> externsFilePaths)
		{
			var externsDependencies = new DependencyCollection();

			foreach (string externsFilePath in externsFilePaths)
			{
				if (_virtualFileSystemWrapper.FileExists(externsFilePath))
				{
					string content = _virtualFileSystemWrapper.GetFileTextContent(externsFilePath);
					externsDependencies.Add(new Dependency(externsFilePath, content, true));
				}
				else
				{
					throw new FileNotFoundException(
						string.Format(CoreStrings.Common_FileNotExist, externsFilePath));
				}
			}

			return externsDependencies;
		}

		/// <summary>
		/// Fills a list of virtual paths to other files required by the primary asset
		/// </summary>
		/// <param name="asset">Asset</param>
		/// <param name="commonExternsDependencies">List of common JS-externs dependencies</param>
		/// <param name="assetExternsDependencies">List of asset JS-externs dependencies</param>
		protected static void FillAssetVirtualPathDependencies(IAsset asset,
			DependencyCollection commonExternsDependencies, DependencyCollection assetExternsDependencies)
		{
			var paths = new List<string>();
			paths.AddRange(asset.VirtualPathDependencies);

			if (commonExternsDependencies.Count > 0)
			{
				paths.AddRange(commonExternsDependencies
					.Where(d => d.IsObservable)
					.Select(d => d.Url)
					.ToList()
				);
			}

			if (assetExternsDependencies.Count > 0)
			{
				paths.AddRange(assetExternsDependencies
					.Where(d => d.IsObservable)
					.Select(d => d.Url)
					.ToList()
				);
			}

			paths = paths
				.Distinct(StringComparer.OrdinalIgnoreCase)
				.ToList()
				;

			asset.VirtualPathDependencies = paths;
		}

		/// <summary>
		/// Maps a common settings
		/// </summary>
		/// <param name="minifier">Minifier</param>
		/// <param name="commonJsMinifierConfig">Common configuration settings of JS-minifier</param>
		protected static void MapCommonSettings(ClosureJsMinifierBase minifier,
			JsMinifierSettingsBase commonJsMinifierConfig)
		{
			minifier.Charset = commonJsMinifierConfig.Charset;
			minifier.CompilationLevel = commonJsMinifierConfig.CompilationLevel;
			minifier.PrettyPrint = commonJsMinifierConfig.PrettyPrint;
			minifier.UseTypesForOptimization = commonJsMinifierConfig.UseTypesForOptimization;
			minifier.Severity = commonJsMinifierConfig.Severity;
		}

		/// <summary>
		/// Fills a JavaScript compilation options
		/// </summary>
		/// <returns>Compilation options</returns>
		internal void FillJsCompilationOptions(JsCompilationOptionsBase options)
		{
			options.Charset = Charset;
			options.CompilationLevel = CompilationLevel;
			options.PrettyPrint = PrettyPrint;
			options.UseTypesForOptimization = UseTypesForOptimization;
			options.Severity = Severity;
		}
	}
}